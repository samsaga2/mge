prog = (<nl-comment>|<ws>)? (global|property|const|sub) (<nl-comment> (global|property|const|sub))* (<nl-comment>|<ws>)?

nl = #'[\s\n\r]+'
comment = #'\s*\'[^\n\r]*[\n\r]+'
nl-comment = (comment|nl)
ws = #'\s+'
id = #'[a-zA-Z_][a-zA-Z0-9_]*'
num = #'-?[0-9]+'
str = <'"'> #'[^"]*' <'"'>
comma = <ws>? <','> <ws>? 

const = <'const'> <ws> id <ws>? <'='> <ws>? num
property = <'property'> <ws> id
global = <'global'> <ws> id

sub = <'sub'> <ws> id <nl-comment> op* <'endsub'>
<op> = <ws>? (load|if-ops|new-ops|return|assign|call|music-stop|sfx-play|scroll|set-tile|print|sprite-delete) <nl-comment>+

<arg> = add-sub
<add-sub> = mul-div | arg-add | arg-sub
arg-add = add-sub <ws>? <'+'> <ws>? mul-div
arg-sub = add-sub <ws>? <'-'> <ws>? mul-div
<mul-div> = term | arg-mul | arg-div
arg-mul = mul-div <ws>? <'*'> <ws>? term
arg-div = mul-div <ws>? <'/'> <ws>? term
<term> = id | num | <'('> <ws>? add-sub <ws>? <')'>

<new-ops> = <'new'> <ws> (new-sprite)
new-sprite = <'sprite'> <comma> str <ws>? [<','> <ws>? arg]*

sprite-delete = <'delete'>

if-ops = (<'if'> <ws> cmp <ws> then else <'endif'>|<'if'> <ws> cmp <ws> then <'endif'>)
then = <'then'> <nl> op*
else = <'else'> <nl> op*

<cmp> = (if-keydown|if-keypressed|if-collide|if-cmp|if-tile)
if-keydown = <'keydown'> <ws>? str
if-keypressed = <'keypressed'> <ws>? str
if-cmp = arg <ws>? ('='|'<>'|'<'|'>'|'>='|'<=') <ws>? arg
if-collide = <'collide'> <ws>? arg
if-tile = <'tile'> <ws> arg <comma> arg <ws>? <'='> <ws>? arg

return = <'return'>
call = <'call'> <ws> id <ws>? [<','> <ws>? arg]*
load = <'load'> <ws> ('image'|'title'|'animation'|'music'|'sfx'|'tilemap'|'screen') <comma> str
music-stop = <'music'> <ws> <'stop'> 
sfx-play = <'sfx'> <ws> <'play'> <ws> arg

assign = id <ws>? <'='> <ws>? arg

<scroll> = <'scroll'> <ws> (scroll-right|scroll-left)
scroll-right = <'right'>
scroll-left = <'left'>
set-tile = <'set'> <ws> <'tile'> <ws> arg <comma> arg <comma> arg

<print> = (print-str|print-num|zprint-num)
print-str = <'print'> <ws> arg <comma> arg <comma> str
print-num = <'print'> <ws> arg <comma> arg <comma> arg
zprint-num = <'zprint'> <ws> arg <comma> arg <comma> arg